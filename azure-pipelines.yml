schedules:
- cron: "0 3 * * Mon"
  displayName: Weekly build
  branches:
    include:
    - master
  always: true
stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: "j1"
        steps:
          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                # Write your commands here

                echo 'Hello world'


  - stage: ArtifactAndPackage
    jobs:
          - job: 'j2'
            steps:
            - task: ServiceNow-DevOps-Agent-Artifact-Registration@1
              inputs:
                connectedServiceName: 'empdsingh2-TestReleasePipeline-ServiceNow DevOps Service Connection'
                artifactsPayload: |
                  {
                  "artifacts": [
                  {
                  "name": "Builddrop-1",
                  "version": "1.$(Build.BuildId)",
                  "semanticVersion": "1.$(Build.BuildId).0",
                  "repositoryName": "testpipeline"
                  }
                  ]
                  }
          
            - task: ServiceNow-DevOps-Agent-Package-Registration@1
              inputs:
                connectedServiceName: 'empdsingh2-TestReleasePipeline-ServiceNow DevOps Service Connection'
                packageName: 'Package1'
                artifactsPayload: |
                  {
                  "artifacts": [
                  {
                  "name": "Builddrop-1",
                  "version": "1.$(Build.BuildId)",
                  "semanticVersion": "1.$(Build.BuildId).0",
                  "repositoryName": "testpipeline"
                  }
                  ]
                  }
  - stage: Test
    jobs:
    - job: 'ParallelTesting'
      pool:
        vmImage: 'ubuntu-18.04'
      strategy:
        parallel: 2
      displayName: Run tests in parallel

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk 6.0.x'
        inputs:
          version: 6.0.x
          performMultiLevelLookup: true
          
      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          command: build
          projects: '**/*.csproj'

      - bash: |
          tests=($(dotnet test . --no-build --list-tests | grep Test_))
          . 'create_slicing_filter_condition.sh' $tests
        displayName: 'Create slicing filter condition'
      
      - bash: |
          echo "Slicing filter condition: $(targetTestsFilter)"
        displayName: 'Echo slicing filter condition'

      - task: DotNetCoreCLI@2
        displayName: Test
        inputs:
          command: test
          projects: '**/*Tests/*Tests.csproj'
          arguments: '--no-build --filter "$(targetTestsFilter)"'

  - stage: publish
    displayName: publish
    jobs:
      - job: "j3"
        steps:
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)'
              artifact: 'az-artifact-9'
              publishLocation: 'pipeline'